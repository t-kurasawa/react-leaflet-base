import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../store';
import { search, SearchCondition } from '../apis/stockpile-api';

import { RandomUser } from '../stores/randomuser-slice'

import moment from 'moment'

const STORE_NAME = 'stockpile';

export interface StockpilesState {
  status: 'idle' | 'loading' | 'failed';
  stockpiles: Array<Stockpile>
}

export interface Stockpile{
  id: number,
  name: String,
  user: RandomUser,
  stockQuantity: Number,
  lat: number,
  lng: number,
  address: String,
  registrationDate: String,
  expiryDate: String,
}

const registrationDate = moment().format('YYYY-MM-DD')

const initialState: StockpilesState = {
  status: 'idle',
  stockpiles: [{
    id: 1,
    name: '尾西の五目ごはん',
    user: {
      id: {
        name: 'PPS',
        value: '0390511T'
      },
      name: {
        title: 'mr',
        first: 'brad',
        last: 'gibson',
      },
      gender: 'male',
      picture: {
        large: 'https://randomuser.me/api/portraits/men/75.jpg',
        medium: 'https://randomuser.me/api/portraits/med/men/75.jpg',
        thumbnail: 'https://randomuser.me/api/portraits/thumb/men/75.jpg'
      },
      email: 'brad.gibson@example.com'
    },
    stockQuantity: 100,
    lat: 0,
    lng: 0,
    address: '東京都千代田区丸の内１丁目',
    registrationDate: registrationDate,
    expiryDate: registrationDate,
  }],
};


// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const stockpileSearchAsync = createAsyncThunk(
  STORE_NAME + '/search',
  async (condition:SearchCondition) => {
    console.log(condition)
    const response = await search(condition);
    // The value we return becomes the `fulfilled` action payload
    console.log(response)
    return response.data;
  }
);

export const StockPileSlice = createSlice({
  name: STORE_NAME,
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  } ,
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(stockpileSearchAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(stockpileSearchAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.stockpiles = action.payload.stockpiles;
      })
      .addCase(stockpileSearchAsync.rejected, (state) => {
        state.status = 'failed';
      })
  },
});


export const selectStockPiles = (state: RootState) => state.stockpile.stockpiles;

export default StockPileSlice.reducer;

